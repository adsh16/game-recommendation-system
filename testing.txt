from whoosh.index import create_in
from whoosh.fields import Schema, TEXT
from whoosh.qparser import MultifieldParser, FuzzyTermPlugin
import os
from tabulate import tabulate
from colorama import init, Fore, Style

def create_search_index(game_list):
    """
    Create a Whoosh search index for game names.
    
    Parameters:
    - game_list (list): List of game names to index.
    
    Returns:
    - Index object for searching.
    """
    schema = Schema(game_name=TEXT(stored=True))
    if not os.path.exists("indexdir"):
        os.mkdir("indexdir")
    ix = create_in("indexdir", schema)
    
    writer = ix.writer()
    for game in game_list:
        writer.add_document(game_name=game)
    writer.commit()
    return ix

def search_game(game_name, index, limit=10):
    """
    Search for the closest game name using Whoosh, with fuzzy matching.
    
    Parameters:
    - game_name (str): The name of the game to search for.
    - index (Index): The Whoosh index created for game names.
    - limit (int): The number of closest matches to return.
    
    Returns:
    - List of matching game names.
    """
    with index.searcher() as searcher:
        parser = MultifieldParser(["game_name"], schema=index.schema)
        parser.add_plugin(FuzzyTermPlugin())  # Enables fuzzy search
        query = parser.parse(game_name)
        results = searcher.search(query, limit=limit)
        return [(r["game_name"], r.score) for r in results]

def print_search_results(closest_games, query):
    """Print search results in a beautiful table format"""
    search_data = [(i, game, f"{score:.3f}") 
                   for i, (game, score) in enumerate(closest_games, 1)]
    
    print(f"\n{Fore.CYAN}🔍 Search Results for '{query}'{Style.RESET_ALL}")
    print(tabulate(search_data,
                  headers=["#", "Game Name", "Match Score"],
                  tablefmt="rounded_grid",
                  numalign="center",
                  stralign="left"))
    
def print_recommendations(recommendations, input_game, final_data):
    """Print recommendations in a beautiful table format"""
    # Prepare data for tabulate
    table_data = []
    for game, combined_score, feature_score, cosine_score in recommendations:
        aggregate_score = final_data.loc[game]['aggregate_score'] if game in final_data.index else "N/A"
        
        # Add color based on combined score
        if combined_score >= 0.8:
            color = Fore.GREEN
        elif combined_score >= 0.6:
            color = Fore.YELLOW
        else:
            color = Fore.RED
            
        table_data.append([
            f"{color}{game}{Style.RESET_ALL}",
            f"{color}{combined_score:.3f}{Style.RESET_ALL}",
            f"{feature_score:.3f}",
            f"{cosine_score:.3f}",
            str(aggregate_score)
        ])

    # Print recommendations table
    print(f"\n{Fore.CYAN}🎮 Recommendations for '{input_game}'{Style.RESET_ALL}")
    print(tabulate(table_data,
                  headers=["Game Name", "Match Score", "Feature Score", "Cosine Score", "Agg. Score"],
                  tablefmt="rounded_grid",
                  numalign="center",
                  stralign="left"))

# Example usage:
game_list = processed_df.index.tolist()
index = create_search_index(game_list)

# ----------------------------------------------------------------
# ----------------------------------------------------------------
""" Enter Game Name Here and Run the Code """
query = "black myth wukong"
# ----------------------------------------------------------------
# ----------------------------------------------------------------
closest_games = search_game(query, index, limit=10)

# Print search results
print_search_results(closest_games, query)

# Get and print recommendations
game_name = closest_games[0][0]
recommendations = get_game_recommendations(game_name, processed_df, final_model)

# Sort recommendations by aggregate score
recommendations_sorted = sorted(
    recommendations,
    key=lambda x: final_data.loc[x[0]]['aggregate_score'] 
    if x[0] in final_data.index else -1,
    reverse=True
)

# Print recommendations
print_recommendations(recommendations_sorted, game_name, final_data)

# Print legend
print(f"\n{Fore.CYAN}📋 Legend:{Style.RESET_ALL}")
print(f"{Fore.GREEN}■{Style.RESET_ALL} High similarity (≥ 0.8)")
print(f"{Fore.YELLOW}■{Style.RESET_ALL} Medium similarity (≥ 0.6)")
print(f"{Fore.RED}■{Style.RESET_ALL} Lower similarity (< 0.6)")